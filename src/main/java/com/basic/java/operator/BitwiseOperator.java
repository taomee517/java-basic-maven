package com.basic.java.operator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BitwiseOperator {
    private static Logger log = LoggerFactory.getLogger(BitwiseOperator.class);

    public static void main(String[] args) {
        /**
         * 位运算符
         * 按位或： |
         * 按位异或： ^
         * 取反：  ~
         * 右移：  >> 相当于除以2
         * 左移：  << 相当于乘以2
         * 详细解释可参考百度经验：https://dwz.cn/CBYCs6HL
         */
        int a = 8;
        int b = 4;
        int x = a << 2;
        log.info("左移(<<)运算：{} << 2 = {} ",a, x);
        int y = b >> 2;
        log.info("右移(>>)运算：{} >> 2 = {} ",a, y);
        byte ba = (byte)a;
        //-10的二进制等于10取反后加1
        int aa = ~ba + 1;
        String cc = Integer.toBinaryString(aa);
        log.info(aa + "转化为二进制：" + cc);

        String c = Integer.toBinaryString(a);
        log.info(a + "转化为二进制：" + c);

        String d = Integer.toBinaryString(b);
        log.info(b + "转化为二进制：" + d);

        /** 按位与： &
         *  说明：参加运算的两个数，换算为二进制(0、1)后，进行与运算。只有当相应位上的数都是1时，该位才取1，否则该为为0。
         *  将10与-10进行按位与(&)运算：
         *  0000 0000 0000 1010
         *  1111 1111 1111 0110
         *  -----------------------
         *  0000 0000 0000 0010
         *  所以：10 & -10 = 0000 0000 0000 0010
         */
        log.info("按位与(&)运算：{} & {} = {}" , a, b,(a & b));

        /**按位或： |
         * 说明：参加运算的两个数，换算为二进制(0、1)后，进行或运算。只要相应位上存在1，那么该位就取1，均不为1，即为0。
         * 将10与-10进行按位或(|)运算：
         * 0000 0000 0000 1010
         * 1111 1111 1111 0110
         * -----------------------
         * 1111 1111 1111 1110
         * 所以：10 | -10 = 1111 1111 1111 1110
         */
        log.info("按位或(|)运算：{} | {} = {}" , a, b,(a | b));

        /**按位异或：^
         * 说明：参加运算的两个数，换算为二进制(0、1)后，进行异或运算。只有当相应位上的数字不相同时，该为才取1，若相同，即为0。
         * 将10与-10进行按位异或(^)运算：
         * 0000 0000 0000 1010
         * 1111 1111 1111 0110
         * -----------------------
         * 1111 1111 1111 1100
         * 所以：10 ^ -10 = 1111 1111 1111 1100
         */
        log.info("按位异或(^)：{} ^ {} = {}", a, b,(a ^ b));

        /**补码
         * 要将十进制的-10用二进制表示，先将10用二进制表示：
         * 0000 0000 0000 1010
         * 取反：
         * 1111 1111 1111 0101
         * 加1：
         * 1111 1111 1111 0110
         * 所以，-10的二进制表示就是：1111 1111 1111 0110
         */
        log.info("取反(~)运算：~ {} = {}",a, ~a);
    }
}
